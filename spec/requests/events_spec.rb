 require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/events", type: :request do
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user_id: 1,
      name: "a test event",
      description: "A description",
      location: "Lagos",
      start_date: '2088-01-01',
      end_date: '2088-01-02',
      start_time: '13:00',
      end_time: '16:00',
      is_active: 1,
      tickets_attributes: [
        {
          name: 'Access',
          payment_type: 'free',
          description: 'Allow access for one',
          price: 0,
          available_slots: 100
        }
      ]
    }
  }

  let(:invalid_attributes) {
    {
      user_id: 1,
      name: "a test event",
      description: "A description",
      location: "",
      start_date: '2088-01-01',
      end_date: '2081-01-02',
      start_time: '13:00',
      end_time: '10:00',
      is_active: 1
    }
  }
  
  describe "GET /index" do
    it "renders a successful response" do
      event = Event.create! valid_attributes
      user = User.create!({
        email: 'user@test.com',
        password: 'user123'
      })
      sign_in user
      get events_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      event = Event.create! valid_attributes
      get event_url(event)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      user = User.create!({
        email: 'user@test.com',
        password: 'user123'
      })
      sign_in user
      get new_event_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      event = Event.create! valid_attributes
      user = User.create!({
        email: 'user@test.com',
        password: 'user123'
      })
      sign_in user
      get edit_event_url(event)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Event" do
        expect {
          user = User.create!({
            email: 'user@test.com',
            password: 'user123'
          })
          sign_in user
          post events_url, params: { event: valid_attributes }
        }.to change(Event, :count).by(1) .and change(Ticket, :count).by(1)
      end

      it "redirects to the created event" do
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        post events_url, params: { event: valid_attributes }
        expect(response).to redirect_to(event_url(Event.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Event" do
        expect {
          user = User.create!({
            email: 'user@test.com',
            password: 'user123'
          })
          sign_in user
          post events_url, params: { event: invalid_attributes }
        }.to change(Event, :count).by(0)
      end

      it "renders an unprocessable_entity response (i.e. to display the 'new' template)" do
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        post events_url, params: { event: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested event" do
        event = Event.create! valid_attributes
        new_attributes = {:name => "A new name", :description => "A new description", :location => "Lagos 2", :start_date => '2088-01-02', :end_date => '2088-01-04', :start_time => '14:00', :end_time => '18:00', :is_active => 0, :tickets_attributes => [{ :id => event.tickets.load.first.id, :name => 'Access 2', :payment_type => 'paid', :description => 'Allow access for one', :price => 2000, :available_slots => 1000 }]}
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        patch event_url(event), params: { event: new_attributes }
        event.reload
        ticket = event.tickets.load.first
        expect(event.name).to eq(new_attributes[:name])
        expect(event.description).to eq(new_attributes[:description])
        expect(event.location).to eq(new_attributes[:location])
        expect(event.start_date.strftime("%Y-%m-%d")).to eq(new_attributes[:start_date])
        expect(event.end_date.strftime("%Y-%m-%d")).to eq(new_attributes[:end_date])
        expect(event.start_time.strftime("%H:%M")).to eq(new_attributes[:start_time])
        expect(event.end_time.strftime("%H:%M")).to eq(new_attributes[:end_time])
        expect(event.is_active).to eq(new_attributes[:is_active])

        expect(ticket.name).to eq(new_attributes[:tickets_attributes][0][:name])
        expect(ticket.payment_type).to eq(new_attributes[:tickets_attributes][0][:payment_type])
        expect(ticket.description).to eq(new_attributes[:tickets_attributes][0][:description])
        expect(ticket.price).to eq(new_attributes[:tickets_attributes][0][:price])
        expect(ticket.available_slots).to eq(new_attributes[:tickets_attributes][0][:available_slots])
      end

      it "redirects to the event" do
        event = Event.create! valid_attributes
        new_attributes = {:name => "A new name", :description => "A new description", :location => "Lagos 2", :start_date => '2088-01-02', :end_date => '2088-01-04', :start_time => '14:00', :end_time => '18:00', :is_active => 0, :tickets_attributes => [{ :id => event.tickets.load.first.id, :name => 'Access 2', :payment_type => 'paid', :description => 'Allow access for one', :price => 2000, :available_slots => 1000 }]}
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response).to redirect_to(event_url(event))
      end
    end

    context "with invalid parameters" do
      it "renders an have_http_status(:unprocessable_entity) response (i.e. to display to the 'edit' template)" do
        event = Event.create! valid_attributes
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        patch event_url(event), params: { event: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested event" do
      expect(Ticket.all.count).to equal(2)
      event = Event.create! valid_attributes
      expect(Ticket.all.count).to equal(3)
      expect {
        user = User.create!({
          email: 'user@test.com',
          password: 'user123'
        })
        sign_in user
        delete event_url(event)
      }.to change(Event, :count).by(-1) .and change(Ticket, :count).by(-1)
    end

    it "redirects to the events list" do
      event = Event.create! valid_attributes
      user = User.create!({
        email: 'user@test.com',
        password: 'user123'
      })
      sign_in user
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end
end
